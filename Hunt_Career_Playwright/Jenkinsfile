// Function to print a standardized banner
def printBanner(message) {
    echo '----------------------------------------'
    echo "    ${message}"
    echo '----------------------------------------'
}

pipeline {
    agent any

    tools {
        nodejs 'NodeJS'
    }

    options {
        timestamps()
        timeout(time: 30, unit: 'MINUTES')
        // Clean workspace before build
        skipDefaultCheckout true
    }

    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'Git branch to build from')
    }

    stages {
        stage('Checkout') {
            steps {
                printBanner("CHECKING OUT SOURCE CODE: ${params.BRANCH}")
                cleanWs()
                checkout scm
            }
        }

        // Grouping all Playwright-related steps
        stage('Playwright Execution') {
            steps {
                dir('Hunt_Career_Playwright') {
                    script {
                        try {
                            stage('Install Dependencies') {
                                printBanner('INSTALLING NPM DEPENDENCIES')
                                bat 'npm install'
                            }

                            stage('Install Playwright Browsers') {
                                printBanner('INSTALLING PLAYWRIGHT BROWSERS')
                                bat 'npx playwright install --with-deps'
                            }

                            stage('Run Playwright Tests') {
                                printBanner('RUNNING PLAYWRIGHT TESTS')
                                bat 'npx playwright test'
                            }
                        } catch (err) {
                            echo "❌ Playwright tests failed: ${err.message}"
                            // Mark the build as failed
                            currentBuild.result = 'FAILURE'
                            // Re-throw the error to ensure the pipeline stops
                            error("Pipeline failed due to Playwright test failures.")
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            // This block will always run, regardless of the pipeline's status
            dir('Hunt_Career_Playwright') {
                printBanner('ARCHIVING & PUBLISHING REPORTS')

                // Archive test reports and artifacts
                archiveArtifacts artifacts: 'playwright-report/**/*', allowEmptyArchive: true

                // Publish HTML reports
                publishHTML(target: [
                    allowMissing: true,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'playwright-report',
                    reportFiles: 'index.html',
                    reportName: 'Playwright Test Report'
                ])
            }
        }

        failure {
            // Send email notification on failure
            mail to: 'qa-team@example.com',
                 subject: "❌ Playwright Pipeline Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "The Playwright test pipeline failed. Please check Jenkins for details: ${env.BUILD_URL}"
        }
    }
}
