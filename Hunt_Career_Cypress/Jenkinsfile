// Function to print a standardized banner
def printBanner(message) {
    echo '----------------------------------------'
    echo "    ${message}"
    echo '----------------------------------------'
}

pipeline {
    agent any

    tools {
        nodejs 'NodeJS'
    }

    options {
        timestamps()
        timeout(time: 30, unit: 'MINUTES')
        // Clean workspace before build
        skipDefaultCheckout true
    }

    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'Git branch to build from')
        choice(name: 'ENV', choices: ['dev', 'qa', 'staging'], description: 'Target environment')
    }

    stages {
        stage('Checkout') {
            steps {
                printBanner("CHECKING OUT SOURCE CODE: ${params.BRANCH}")
                cleanWs()
                checkout scm
            }
        }

        // Grouping all Cypress-related steps
        stage('Cypress Execution') {
            steps {
                dir('Hunt_Career_Cypress') {
                    script {
                        try {
                            stage('Install Dependencies') {
                                printBanner('INSTALLING NPM DEPENDENCIES')
                                bat 'npm install'
                            }

                            stage('Verify Cypress Installation') {
                                printBanner('VERIFYING CYPRESS BINARY')
                                bat 'npx cypress install'
                            }

                            stage('Run Cypress Tests') {
                                printBanner("RUNNING CYPRESS TESTS ON ${params.ENV}")
                                // Headless mode for CI
                                bat 'npx cypress run --headless'
                            }
                        } catch (err) {
                            echo "❌ Cypress tests failed: ${err.message}"
                            currentBuild.result = 'FAILURE'
                            // Re-throw the error to ensure the pipeline stops
                            error("Pipeline failed due to Cypress test failures.")
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            // This block will always run, regardless of the pipeline's status
            dir('Hunt_Career_Cypress') {
                printBanner('ARCHIVING & PUBLISHING REPORTS')

                // Archive test reports and artifacts
                archiveArtifacts artifacts: 'mochawesome-report/**', allowEmptyArchive: true
                archiveArtifacts artifacts: 'cypress/screenshots/**/*.png', allowEmptyArchive: true
                archiveArtifacts artifacts: 'cypress/videos/**/*.mp4', allowEmptyArchive: true

                // Publish HTML reports
                publishHTML(target: [
                    allowMissing: true,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'mochawesome-report',
                    reportFiles: 'mochawesome.html',
                    reportName: 'Cypress Test Report'
                ])
            }
        }

        failure {
            // Send email notification on failure, wrapped in a try-catch block
            script {
                try {
                    mail to: 'qa-team@example.com',
                         subject: "❌ Cypress Pipeline Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                         body: "The Cypress test pipeline failed. Please check Jenkins for details: ${env.BUILD_URL}"
                } catch (err) {
                    echo "⚠️ Failed to send email notification: ${err.message}"
                }
            }
    }
}
